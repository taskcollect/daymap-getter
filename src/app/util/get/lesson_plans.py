
import json
import lxml.html
from typing import Dict, List, Tuple
from requests import Session

from util.net import request_daymap_resource


def fix_plan_content(text: str) -> str:
    """
    Fix up the weird formatting in teacher notes.
    """
    return text.replace('\r\n', '\n').replace(u'\xa0', u' ')


def get_link_dict_from_atags(atags: List[lxml.html.Element]) -> Dict[str, str]:
    """
    Given all of the <a> tags in a lesson plan, return a dict of the links.
    The link name will be the key, and actual link the value.
    """
    link_dict = {}
    for a in atags:
        link_dict[a.text_content().strip()] = a.get('href')
    return link_dict


def get_file_dict_from_flinkdivs(flinkdivs: List[lxml.html.Element]) -> Dict[str, int]:
    """
    Daymap stores its attachments in an "attachmentlist" div, which contains
    a bunch of <div>s with class "fLinkDiv". Each of these <div>s has the information
    of an individual attachment.

    This function takes a 'fLinkDiv' and extracts the file name, and Daymap
    attachment id into a dict.

    The attachment ID can be used to download the file really easily, by just
    putting it in a download link like so:

    https://daymap.gihs.sa.edu.au/daymap/attachment.ashx?ID=<attachment_id>

    Example of a 'fLinkDiv' element:

    <div class="fLinkDiv">
        <a href="#" onclick="DMU.OpenAttachment(123456);">            <- attachment id
            <i class="fal fa-file-pdf"></i>
            &nbsp;The Normal Distribution - Haese 12 General.pdf      <- file name
        </a>
    </div>
    """
    file_dict = {}

    for div in flinkdivs:
        # get the file link
        a = div.xpath("./a")[0]

        # get the file name from the text of the link
        filename = a.text_content().strip()

        # DMU.OpenAttachment(123456); -> 123456
        id = int(a.get('onclick')[19:].rstrip(');'))

        file_dict[filename] = id
    return file_dict


def parse_lesson_plans(raw: str) -> Tuple[List[Dict], Dict]:
    tree = lxml.html.fromstring(raw)
    plan_divs = tree.xpath("//div[@class='lpHead']")

    plans = []
    for plan_div in plan_divs:
        print('\n----------------------------------------------\n')
        # title either autogenerated from notes or manually entered
        title = plan_div.xpath(
            "./div[@class='lpTitle']"
        )[0].text_content().strip()

        # notes that the teacher might have put down
        content_div = plan_div.xpath("./div[@class='lpAll']")[0]
        # fix up the note formatting
        content = fix_plan_content(content_div.text_content().strip())

        # fish out links from the teacher notes
        links = get_link_dict_from_atags(content_div.xpath(".//a"))

        # fish out files from the plan
        flinkdivs = plan_div.xpath(".//div[@class='fLinkDiv']")
        files = get_file_dict_from_flinkdivs(flinkdivs)

        plan = {
            "title": title,
        }

        if content:
            plan["content"] = content

        if links:
            plan["links"] = links

        if files:
            plan["files"] = files

        plans.append(plan)

    # now, there can be some more attachments if the teacher has added them OUTSIDE of a note!
    # we need to fish them out and add them to the plan

    extra_flinkdivs = tree.xpath("div[2]//div[@class='fLinkDiv']")
    extra_files = get_file_dict_from_flinkdivs(extra_flinkdivs)
    print(extra_files)

    return plans, extra_files


PLANS_URL = "https://daymap.gihs.sa.edu.au/DayMap/Student/plans/class.aspx/LessonPlans"


def get_lesson_plans(
    event_id: int,
    username: str,
    password: str = None,
    session=None,
) -> Tuple[List[Dict], Dict, Session]:
    # construct url base
    url = PLANS_URL.format(event_id)

    # request the url
    resp, session = request_daymap_resource(
        url=url,
        method="POST",
        headers={
            "Content-Type": "application/json; charset=UTF-8"
        },
        payload=json.dumps({"eventId": event_id}),
        username=username,
        session=session,
        password=password,
    )  # (no need to try/except here, just let it raise naturally)

    notes, extra_files = parse_lesson_plans(resp.json()['d'])

    return notes, extra_files, session
